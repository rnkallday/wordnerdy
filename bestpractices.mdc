Before diving into the best practices, please note that you may need to adapt the globs depending on your project's specific structure and file types.

---
name: nextjs-best-practices.mdc
description: Best practices for Next.js applications and routing
globs: **/*.{js,jsx}
---

- Utilize the App Router for improved performance and simpler routing
- Implement proper error boundaries to handle runtime errors gracefully
- Use `getStaticProps` and `getServerSideProps` for data fetching where appropriate
- Optimize images with `next/image` for better performance

---
name: tailwindcss-best-practices.mdc
description: Best practices for styling with Tailwind CSS
globs: **/*.{js,jsx,css}
---

- Use utility classes directly in JSX for faster development
- Create custom components for repeated styles to maintain DRY principles
- Utilize Tailwind's responsive utility classes for mobile-first design
- Leverage `@apply` in custom CSS to combine multiple utility classes

---
name: framer-motion-best-practices.mdc
description: Best practices for animations with Framer Motion
globs: **/*.{js,jsx}
---

- Use `animate` and `initial` props for simple animations
- Implement `variants` for complex, reusable animations
- Optimize performance by using `layoutId` for shared element transitions
- Consider using `useReducedMotion` hook for accessibility

---
name: lucide-react-best-practices.mdc
description: Best practices for using Lucide icons in React
globs: **/*.{js,jsx}
---

- Import icons on-demand to reduce bundle size
- Use `size` and `color` props for consistent styling across the app
- Create a wrapper component for icons to maintain consistent usage
- Consider accessibility by adding appropriate `aria-label` attributes

---
name: class-variance-authority-best-practices.mdc
description: Best practices for managing class variations with CVA
globs: **/*.{js,jsx}
---

- Define clear and descriptive variant names for better readability
- Use `cva` to create component-specific style systems
- Combine with Tailwind utilities for powerful, flexible styling
- Utilize the `compoundVariants` feature for complex style combinations

---
name: clsx-best-practices.mdc
description: Best practices for conditionally applying classes with clsx
globs: **/*.{js,jsx}
---

- Use `clsx` to simplify conditional class application
- Combine with Tailwind classes for dynamic styling
- Group related classes together for better code organization
- Consider creating utility functions for common class combinations

---
name: tailwind-merge-best-practices.mdc
description: Best practices for merging Tailwind classes with tailwind-merge
globs: **/*.{js,jsx}
---

- Use `twMerge` to safely combine Tailwind classes
- Combine with `clsx` for more complex class merging scenarios
- Utilize in component libraries to ensure consistent styling
- Consider creating a wrapper function for common merge patterns